#!/usr/bin/env python
"""
Uploads files to XNAT.
"""

import sys
import os
import re
import imp
import argparse
from collections import defaultdict

# Import the command helper by path, since the log options must be
# processed before importing any qipipe module.
cmd = imp.load_source('command',
                      (os.path.dirname(__file__) +
                       '/../qipipe/helpers/command.py'))


def main(argv=sys.argv):
    # Parse the command line arguments.
    inputs, opts = _parse_arguments()
    
    # The XNAT configuration.
    config = opts.pop('config', None)

    # Configure the logger.
    cmd.configure_log(opts)
    
    # Import the qipipe pipeline module after configuring the logger.
    import qipipe
    from qipipe.helpers import xnat_helper
    from qipipe.interfaces import XNATUpload

    prj = opts.pop('project', qipipe.project())
    label = opts.pop('session')
    sbj, sess = xnat_helper.parse_session_label(label)
    # Upload the files.
    with xnat_helper.connection(config) as xnat:
        upload = XNATUpload(project=prj, subject=sbj, session=sess,
                            in_files=inputs, **opts)
        result = upload.run()

    return 0


def _parse_session_labels(labels):
    """
    Parses the given XNAT session labels into *(subject, session)* tuples
    grouped by project.
    
    :param labels: the labels to parse
    :return: the *[(subject, session), ...]}* list
    """
    return [xnat_helper.parse_session_label(lbl)
            for lbl in labels]


def _parse_arguments():
    """Parses the command line arguments."""
    parser = argparse.ArgumentParser()

    # The log options.
    cmd.add_standard_options(parser)

    # The remaining options.
    target_grp = parser.add_mutually_exclusive_group()
    target_grp.add_argument('-a', '--assessor', metavar='LABEL',
                            help='the XNAT assessor name')
    parser.add_argument('-r', '--resource', metavar='LABEL',
                        help='the XNAT resource name')
    target_grp.add_argument('--reconstruction', metavar='LABEL',
                            help='the XNAT reconstruction name')

    # The input sessions to process.
    parser.add_argument('session', metavar='LABEL',
                        help='the target XNAT session')

    # The input sessions to process.
    parser.add_argument('files', nargs='+', metavar='FILE',
                        help='the input file(s) to upload')

    args = vars(parser.parse_args())
    nonempty_args = dict((k, v) for k, v in args.iteritems() if v != None)

    return nonempty_args.pop('files'), nonempty_args


if __name__ == '__main__':
    sys.exit(main())
