#!/usr/bin/env python
"""
Prints each patient-study-series-image path in a DICOM image hierarchy.
The format of each path is a line of tab-delimited fields.
"""

import sys
import os
import getopt
from collections import defaultdict
from qipipe.helpers.collection_helper import to_series
from qipipe.helpers.dicom_helper import ImageHierarchy, iter_dicom_headers, select_dicom_tags

import logging
logger = logging.getLogger(__name__)

help_message = """
lsimg options FILE...
Options:
    -s --summary\tPrint only the Patient ID, Study Instance UID, Series Instance UID and Instance Number tags
    -n --no-header\t Omit the tag name header line
    -t --tags\tThe comma-separated tags to print (default is all non-pixel, non-bracketed tags whose value does not include a line break)
    -v\t\tPrint informational messages
    -h --help\tPrint this help message
"""


class Usage(Exception):
    
    def __init__(self, msg):
        self.msg = msg


def main(argv=None):
    if argv is None:
        argv = sys.argv
    tags = []
    header = True
    output = sys.stdout
    try:
        try:
            opts, args = getopt.getopt(argv[1:], 'l:no:st:hv', ['log=', 'no-header', 'output=', 'summary', 'tags=', 'help', 'verbose'])
        except getopt.error, msg:
            raise Usage(msg)
        
        # option processing
        for opt, val in opts:
            if opt in ('-s', '--summary'):
                if tags:
                    raise Usage('The tags option cannot be used with the summary option.')
                # The summary tags include the image hierarchy path.
                tags = ImageHierarchy.TAGS
            elif opt in ('-t', '--tags'):
                if tags:
                    raise Usage('The tags option cannot be used with the summary option.')
                tags = val.split(',')
            elif opt in ('-l' '--log'):
                fh = logging.FileHandler(val)
                fh.setLevel(logging.DEBUG)
                logger.addHandler(fh)
            elif opt in ('-n' '--no-header'):
                header = False
            elif opt in ('-o' '--output'):
                output = open(val, 'w')
            elif opt == '-v':
                logger.setLevel('DEBUG')
            elif opt in ('-h', '--help'):
                print help_message
                return 0

        # Collect the default tags, if necessary.
        if not tags:
            valid = set()
            invalid = set()
            logger.debug("Collecting the DICOM tags from %s..." % to_series(args))
            for ds in iter_dicom_headers(*args):
                tdict = select_dicom_tags(ds)
                for t,v in tdict.iteritems():
                    # Exclude the tag if it can have a multi-line value.
                    if "\n" in str(v):
                        invalid.add(t)
                    else:
                        valid.add(t)
            tags = list(valid - invalid)
            tags.sort()
        
        # Print the header.
        logger.debug("Printing the DICOM tag values...")
        logger.error("test error")
        if header:
            print >> output, "\t".join(tags)
        # Print the tags in each DICOM file.
        for ds in iter_dicom_headers(*args):
            tdict = select_dicom_tags(ds, *tags)
            # If there is at least one non-empty value, then print the tab-separated values.
            if any(v for v in tdict.itervalues()):
                # Augment the tag dictionary with a default empty string value for a missing tag.
                dd = defaultdict(str)
                dd.update(tdict)
                values = [str(dd[t]) for t in tags]
                print >> output, "\t".join(values)
            
        
    except Usage, err:
        print >> sys.stderr, sys.argv[0].split('/')[-1] + ': ' + str(err.msg)
        return 2
    
    return 0        

if __name__ == '__main__':
    sys.exit(main())
