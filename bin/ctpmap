#!/usr/bin/env python
"""
Prints the CTP patient id mapping file for Patient ID tag values in DICOM files.
"""

import sys
import os
import getopt
import re
from qipipe.staging.ctp import create_ctp_id_map

import logging
logger = logging.getLogger('qipipe')

help_message = """
ctpmap options DIR...
Options:
    -c --collection NAME\tThe required target TCIA collection name, e.g. QIN-BREAST-02
    -o --output FILE\tThe output file name (default stdout)
    -1\t\t\Only read the first image file to obtain the Patient ID
    -h --help\tPrint this help message
"""


class Usage(Exception):

    def __init__(self, msg):
        self.msg = msg


class OptError(Exception):

    def __init__(self, msg):
        self.msg = msg


def main(argv=None):
    if argv is None:
        argv = sys.argv
    try:
        try:
            opts, args = getopt.getopt(argv[1:], '1hc:o:v', ['first-only', 'help', 'collection=', 'output=', 'verbose'])
        except getopt.error, msg:
            raise Usage(msg)
        
        # option processing
        output = sys.stdout
        collection = None
        kwargs = {}
        for opt, val in opts:
            if opt in ('-c', '--collection'):
                collection = val
            elif opt in ('-o', '--output'):
                output = open(val, 'w')
            elif opt in ('-1', '--first_only'):
                kwargs['first_only'] = True
            elif opt in ('-v', '--verbose'):
                logger.setLevel('DEBUG')
            elif opt in ('-h', '--help'):
                return 0
        if not collection:
            raise OptError('Required collection option was not set.')
        
        # Print the id map.
        create_ctp_id_map(collection, *args, **kwargs).write(output)
    
    except Usage, err:
        print >> sys.stderr, sys.argv[0].split('/')[-1] + ': ' + str(err.msg)
        return 2
    
    return 0


if __name__ == '__main__':
    sys.exit(main())
