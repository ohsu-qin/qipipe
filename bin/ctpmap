#!/usr/bin/env python
"""
Prints the CTP patient id mapping file for Patient ID tag values in DICOM files.
"""

import sys
import os
import getopt
import re
import logging
from qipipe.staging.ctp import create_ctp_id_map

help_message = """
ctpmap options DIR...
Options:
    -c --collection NAME\tThe required target TCIA collection name, e.g. QIN-BREAST-02
    -o --output FILE\tThe output file name (default stdout)
    -h --help\tPrint this help message
"""


class Usage(Exception):

    def __init__(self, msg):
        self.msg = msg


class OptError(Exception):

    def __init__(self, msg):
        self.msg = msg


def main(argv=None):
    if argv is None:
        argv = sys.argv
    try:
        try:
            opts, args = getopt.getopt(argv[1:], 'hc:o:v', ['help', 'collection', 'output', 'verbose'])
        except getopt.error, msg:
            raise Usage(msg)
        
        # option processing
        collection = None
        output = sys.stdout
        for opt, val in opts:
            if opt in ('-c', '--collection'):
                collection = val
            elif opt in ('-o', '--output'):
                output = open(val, 'w')
            elif opt in ('-v', '--verbose'):
                logging.basicConfig(level=logging.DEBUG)
            elif opt in ('-h', '--help'):
                print help_message
                return 0
        if collection == None:
            raise OptError('Required collection option was not set.')
        
        # Print the id map.
        _print_ctp_id_map(collection, *args)
    
    except Usage, err:
        print >> sys.stderr, sys.argv[0].split('/')[-1] + ': ' + str(err.msg)
        return 2
    
    return 0
    
def _print_ctp_id_map(collection, output, *dirs):
    """Prints the CTP map for the DICOM files in the given directories."""
    
    # The CTP ID map file line format.
    fmt = "ptid/%(dicom id)s=" + collection + "%(ctp id)s"
    # The id map.
    id_map = create_ctp_id_map(collection, *args)
    # Print the ID map file.
    for dcm_id, ctp_id in id_map.iteritems():
        print >> output, fmt % {'dicom id': dcm_id, 'ctp id': ctp_id}

if __name__ == '__main__':
    sys.exit(main())
