#!/usr/bin/env python
"""
Downloads files from XNAT.
"""

import sys
import os
import re
import argparse
from collections import defaultdict
from qipipe import project
from qipipe.helpers import logging_helper
from qipipe.helpers import xnat_helper
from qipipe.interfaces import XNATDownload


def main(argv=sys.argv):
    # Parse the command line arguments.
    inputs, opts = _parse_arguments()

    # Configure the logger.
    log_cfg = {}
    if 'log' in opts:
        log_cfg['filename'] = opts.pop('log')
    if 'log_level' in opts:
        log_cfg['level'] = opts.pop('log_level')
    logging_helper.configure(**log_cfg)

    # The download parent directory.
    dest = opts.pop('output', os.getcwd())

    # Parse the XNAT session label arguments.
    prj_sess_dict = _parse_session_labels(inputs)
    # Download the files.
    with xnat_helper.connection() as xnat:
        for prj, sessions in prj_sess_dict.iteritems():
            for sbj, sess in sessions:
                tgt_dir = os.path.join(dest, prj, sbj, sess)
                # Download the files.
                download = XNATDownload(project=prj, subject=sbj, session=sess,
                                        dest=tgt_dir, **opts)
                result = download.run()

    return 0


def _parse_session_labels(labels):
    """
    Parses the given XNAT session labels into *(subject, session)* tuples grouped
    by project.
    
    :param labels: the labels to parse
    :return: the {project: [(subject, session), ...]} dictionary
    """
    prj_sess_dict = defaultdict(list)
    for label in labels:
        prj, sbj, sess = xnat_helper.parse_session_label(label)
        prj_sess_dict[prj].append(tuple([sbj, sess]))

    return prj_sess_dict


def _parse_arguments():
    """Parses the command line arguments."""
    parser = argparse.ArgumentParser()

    # The logging level.
    verbosity_grp = parser.add_mutually_exclusive_group()
    verbosity_grp.add_argument('-q', '--quiet', help="don't print messages",
                               dest='log_level', action='store_const',
                               const='ERROR')
    verbosity_grp.add_argument(
        '-v', '--verbose', help='print informational messages',
        dest='log_level', action='store_const', const='INFO')
    verbosity_grp.add_argument('-d', '--debug', help='print debug messages',
                               dest='log_level', action='store_const',
                               const='DEBUG')

    # The remaining options.
    target_grp = parser.add_mutually_exclusive_group()
    target_grp.add_argument('-r', '--reconstruction',
                            help='the XNAT reconstruction name')
    target_grp.add_argument('-a', '--assessor', help='the XNAT assessor name')
    parser.add_argument('--format', help='the file format (default NiFTI)')
    parser.add_argument('-f', '--file', help='the XNAT file name')
    parser.add_argument('-l', '--log', help='the log file', metavar='FILE')
    parser.add_argument('-o', '--output',
                        help='the destination directory (default current directory)',
                        metavar='DIR')

    # The input sessions to process.
    parser.add_argument('sessions', help='the input XNAT sessions to register',
                        nargs='+')

    args = vars(parser.parse_args())
    nonempty_args = dict((k, v) for k, v in args.iteritems() if v != None)

    return nonempty_args.pop('sessions'), nonempty_args


if __name__ == '__main__':
    sys.exit(main())
