#!/usr/bin/env python
"""
Downloads files from XNAT.
"""

import sys
import os
import re
import imp
import argparse
from collections import defaultdict

# Import the command helper by path, since the log options must be
# processed before importing any qipipe module.
cmd = imp.load_source('command', 
                      os.path.dirname(__file__) + '/../qipipe/helpers/command.py')


def main(argv=sys.argv):
    # Parse the command line arguments.
    inputs, opts = _parse_arguments()

    # Configure the logger.
    cmd.configure_log(opts)
    
    # Import the qipipe pipeline module after configuring the logger.
    from qipipe.helpers import xnat_helper
    global xnat_helper
    from qipipe.interfaces import XNATDownload

    # The download parent directory.
    dest = opts.pop('output', os.getcwd())

    # Parse the XNAT session label arguments.
    prj_sess_dict = _parse_session_labels(inputs)
    
    # Download the files.
    with xnat_helper.connection() as xnat:
        for prj, sessions in prj_sess_dict.iteritems():
            for sbj, sess in sessions:
                tgt_dir = os.path.join(dest, prj, sbj, sess)
                # Download the files.
                download = XNATDownload(project=prj, subject=sbj, session=sess,
                                        dest=tgt_dir, **opts)
                result = download.run()

    return 0


def _parse_session_labels(labels):
    """
    Parses the given XNAT session labels into *(subject, session)* tuples grouped
    by project.
    
    :param labels: the labels to parse
    :return: the {project: [(subject, session), ...]} dictionary
    """
    prj_sess_dict = defaultdict(list)
    for label in labels:
        prj, sbj, sess = xnat_helper.parse_session_label(label)
        prj_sess_dict[prj].append(tuple([sbj, sess]))

    return prj_sess_dict


def _parse_arguments():
    """Parses the command line arguments."""
    parser = argparse.ArgumentParser()
    
    # The log options.
    cmd.add_log_options(parser)

    # The XNAT name options.
    target_grp = parser.add_mutually_exclusive_group()
    parser.add_argument('-r', '--resource', metavar='LABEL',
                        help='the XNAT resource name')
    target_grp.add_argument('-a', '--assessor', metavar='LABEL',
                            help='the XNAT assessor name')
    target_grp.add_argument('--reconstruction',, metavar='LABEL'
                            help='the XNAT reconstruction name')
    parser.add_argument('--inout',
                        help='the XNAT resource direction (in or out)')
    parser.add_argument('-f', '--file', help='the XNAT file name')

    # The download location option.
    parser.add_argument('-o', '--output',
                        help='the destination directory (default current directory)',
                        metavar='DIR')

    # The input XNAT sessions to process.
    parser.add_argument('sessions', help='the input XNAT sessions to register',
                        nargs='+')

    args = vars(parser.parse_args())
    nonempty_args = dict((k, v) for k, v in args.iteritems() if v != None)

    return nonempty_args.pop('sessions'), nonempty_args


if __name__ == '__main__':
    sys.exit(main())
