#!/usr/bin/env python
"""
Runs the QIN registration pipeline.
"""

import sys, os
import argparse
import logging
# Defer importing the application modules until the logging level has been set.


def main(argv=sys.argv):
    # Parse the command line arguments.
    args = _parse_arguments()
    
    # Configure the logger.
    if args.log:
        logging.basicConfig(filename=args.log)
    if args.log_level:
        logging.getLogger().setLevel(args.log_level)
    
    # Import the application now, after logging has been set.
    from qipipe.pipelines import registration as reg
    
    # The options.
    opts = {}
    if args.work:
        opts['base_dir'] = args.work
    if args.configuration:
        opts['cfg_file'] = args.configuration
    
    # Convert the sessions into (subject, session) tuples based on the QIN
    # XNAT project_subject_session naming standard.
    sess_specs = [tuple(sess.split('_')[-2:]) for sess in args.sessions]
    
    # Run the registration workflow.
    reg.run(*sess_specs, **opts)
    
    return 0

def _parse_arguments():
    """Parses the command line arguments."""
    parser = argparse.ArgumentParser()
    
    # The logging level.
    verbosity_grp = parser.add_mutually_exclusive_group()
    verbosity_grp.add_argument('-q', '--quiet', help="don't print messages",
        dest='log_level', action='store_const', const=logging.ERROR)
    verbosity_grp.add_argument('-v', '--verbose', help='print informational messages',
        dest='log_level', action='store_const', const=logging.INFO)
    verbosity_grp.add_argument('-d', '--debug', help='print debug messages',
        dest='log_level', action='store_const', const=logging.DEBUG)

    # The remaining options.
    parser.add_argument('-l', '--log', help='the log file', metavar='FILE')
    parser.add_argument('-w', '--work', help='the work directory (default a new temp directory)',
        metavar='DIR')
    parser.add_argument('-c', '--configuration', help="the registration configuration file",
        metavar='FILE')
    
    # The input sessions to process.
    parser.add_argument('sessions', help='the input XNAT sessions to register', nargs='+')
    
    return parser.parse_args()
    

if __name__ == '__main__':
    sys.exit(main())
