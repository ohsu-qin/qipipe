#!/usr/bin/env python
"""
Runs the QIN pipeline.
"""

import sys, os
import argparse
import logging
# Defer importing the application modules until the logging level has been set.


def main(argv=sys.argv):
    # Parse the command line arguments.
    args = _parse_arguments()
    
    # Configure the logger.
    if args.log:
        logging.basicConfig(filename=args.log)
    if args.log_level:
        logging.getLogger().setLevel(args.log_level)
    
    # Import the application now, after logging has been set.
    from qipipe.pipeline import qipipeline as qip
    from qipipe.helpers.project import project
    
    # Set the project.
    project(args.project)
    
    # The options.
    opts = {}
    if args.output:
        opts['dest'] = args.output
    if args.work:
        opts['base_dir'] = args.work
    if args.staging != None:
        opts['staging'] = args.staging
    if args.registration != None:
        opts['registration'] = args.registration
    if args.modeling != None:
        opts['modeling'] = args.modeling
    if args.overwrite:
        opts['overwrite'] = True
    
    # Run the QIN workflow.
    qip.run(args.collection, *args.subject_dirs, **opts)

    return 0

def _parse_arguments():
    """Parses the command line arguments."""
    parser = argparse.ArgumentParser()

    # The AIRC collection to process.
    coll_grp = parser.add_mutually_exclusive_group(required=True)
    coll_grp.add_argument('-b', '--breast', help='the breast TCIA collection',
        dest='collection', action='store_const', const='Breast')
    coll_grp.add_argument('-s', '--sarcoma', help='the sarcoma TCIA collection',
        dest='collection', action='store_const', const='Sarcoma')
    
    # The XNAT project id.
    parser.add_argument('-p', '--project', help='the XNAT project (default is QIN)',
        default='QIN')
    
    # The logging level.
    verbosity_grp = parser.add_mutually_exclusive_group()
    verbosity_grp.add_argument('-q', '--quiet', help="don't print messages",
        dest='log_level', action='store_const', const=logging.ERROR)
    verbosity_grp.add_argument('-v', '--verbose', help='print informational messages',
        dest='log_level', action='store_const', const=logging.INFO)
    verbosity_grp.add_argument('-d', '--debug', help='print debug messages',
        dest='log_level', action='store_const', const=logging.DEBUG)
    
    # The log, output and work options.
    parser.add_argument('-l', '--log', help='the log file', metavar='FILE')
    parser.add_argument('-o', '--output', help='the destination directory (default current directory)',
        metavar='DIR')
    parser.add_argument('-w', '--work', help='the work directory (default a new temp directory)',
        metavar='DIR')
    
    # The dangerous overwrite option.
    parser.add_argument('--overwrite', help='replace existing XNAT subjects',
        action='store_true')
    
    # The workflow configurations.
    parser.add_argument('--staging', help="the staging configuration file",
         metavar='FILE', dest='staging')
    reg_grp = parser.add_mutually_exclusive_group()
    reg_grp.add_argument('--registration', help="the registration configuration file",
        metavar='FILE', dest='registration')
    reg_grp.add_argument('--no-registration', help='only perform the staging workflow',
        dest='registration', action='store_false')
    modeling_grp = parser.add_mutually_exclusive_group()
    modeling_grp.add_argument('--modeling', help="the modeling configuration file",
        metavar='FILE', dest='modeling')
    modeling_grp.add_argument('--no-modeling', help="don't perform the modeling workflow",
        dest='modeling', action='store_false')
    
    # The input subject directories to process.
    parser.add_argument('subject_dirs', help='the input AIRC DICOM subject directories',
        metavar='DIR', nargs='+')

    return parser.parse_args()

    
if __name__ == '__main__':
    sys.exit(main())
