#!/usr/bin/env python
"""
Runs the QIN pipeline.
"""

import sys, os
import argparse
import logging
# Defer importing the application until the logging level has been set.


def main(argv=sys.argv):
    # Parse the command line arguments.
    args = _parse_arguments()
    
    # Configure the logger.
    if args.log:
        logging.basicConfig(filename=args.log)
    if args.log_level:
        logging.getLogger().setLevel(args.log_level)
    
    # Import the application now, after logging has been set.
    from qipipe.pipelines import qipipeline as qip
    
    # Run the QIN workflow.
    qip.run(args.collection, *args.files, output=args.output, work=args.work)

    return 0

def _parse_arguments():
    """Parses the command line arguments."""
    parser = argparse.ArgumentParser()

    coll_grp = parser.add_mutually_exclusive_group(required=True)
    coll_grp.add_argument("-b", "--breast", help="the breast TCIA collection",
        dest='collection', action="store_const", const='Breast')
    coll_grp.add_argument("-s", "--sarcoma", help="the sarcoma TCIA collection",
        dest='collection', action="store_const", const='Sarcoma')
    
    verbosity_grp = parser.add_mutually_exclusive_group()
    verbosity_grp.add_argument("-q", "--quiet", help="don't print messages", dest='log_level',
        action="store_const", const=logging.ERROR)
    verbosity_grp.add_argument("-v", "--verbose", help="print informational messages", dest='log_level',
        action="store_const", const=logging.INFO)
    verbosity_grp.add_argument("-d", "--debug", help="print debug messages", dest='log_level',
        action="store_const", const=logging.DEBUG)
    
    parser.add_argument("-l", "--log", help="the log file")
    parser.add_argument("-o", "--output", help="the destination directory (default current directory)")
    parser.add_argument("-w", "--work", help="the work directory (default a new temp directory)")
    parser.add_argument("files", help="the DICOM files or directories to list (default stdin)", metavar="FILE", nargs='+')

    return parser.parse_args()


if __name__ == '__main__':
    sys.exit(main())
