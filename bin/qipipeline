#!/usr/bin/env python
"""
Runs the QIN pipeline.
"""

import sys
import os
import argparse
import logging
# Defer importing the application until the logging level has been set.

help_message = """
qipipeline options DIR...
Options:
    -b --breast\t\tThe Breast collection
    -s --sarcoma\tThe Sarcoma collection
    -o --output DIR\tThe optional destination directory (default current directory)
    -w --work DIR\tThe optional work directory (default a new temp directory)
    -q, --quiet\t\tSuppress messages
    -v, --verbose\tPrint verbose messages
    -h --help\t\tPrint this help message
"""


class Usage(Exception):

    def __init__(self, msg):
        self.msg = msg


def main(argv=None):
    if argv is None:
        argv = sys.argv
    
    # Parse the options.
    parser = argparse.ArgumentParser()
    coll_grp = parser.add_mutually_exclusive_group()
    coll_grp.add_argument("-b", "--breast", help="the breast TCIA collection",
        dest='collection', action="store_const", const='Breast')
    coll_grp.add_argument("-s", "--sarcoma", help="the sarcoma TCIA collection",
        dest='collection', action="store_const", const='Sarcoma')
    parser.add_argument("-o", "--output", help="the destination directory (default current directory)")
    parser.add_argument("-w", "--work", help="the work directory (default a new temp directory)")
    verbosity_grp = parser.add_mutually_exclusive_group()
    verbosity_grp.add_argument("-q", "--quiet", help="don't print messages", dest='log_level', action="store_const", const=logging.ERROR)
    verbosity_grp.add_argument("-v", "--verbose", help="print verbose messages", dest='log_level', action="store_const", const=logging.DEBUG)
        
    # Import the application now, after logging has been set.
    from qipipe.pipelines import qipipeline as qip
    
    # Run the QIN workflow.
    qip.run(collection, *args, **wfopts)

    return 0


if __name__ == '__main__':
    sys.exit(main())
