#!/usr/bin/env python
"""
Runs the QIN pipeline.
"""

import sys
import os
import argparse
from qipipe.pipeline import qipipeline as qip
from qipipe.helpers import logging_helper
from qipipe.helpers.project import project


def main(argv=sys.argv):
    # Parse the command line arguments.
    args = _parse_arguments()

    # Configure the logger.
    log_cfg = {}
    if args.log:
        log_dir = os.path.dirname(args.log)
        if log_dir and not os.path.exists(log_dir):
            os.makedirs(log_dir)
        log_cfg['filename'] = args.log
    if args.log_level:
        log_cfg['level'] = args.log_level
    logging_helper.configure(**log_cfg)

    # Set the project.
    project(args.project)

    # The options.
    opts = {}
    if args.collection:
        opts['collection'] = args.collection
    if args.output:
        opts['dest'] = args.output
    if args.work:
        opts['base_dir'] = args.work
    if args.staging == False:
        opts['staging'] = args.staging
    if args.mask:
        opts['mask'] = args.mask
    if args.registration != None:
        opts['registration'] = args.registration
    if args.modeling == False:
        opts['modeling'] = args.modeling
    if args.overwrite:
        opts['overwrite'] = True
    if args.resubmit:
        opts['ignore_existing'] = False

    # Run the QIN workflow.
    qip.run(*args.inputs, **opts)

    return 0


def _parse_arguments():
    """Parses the command line arguments."""
    parser = argparse.ArgumentParser()

    # The AIRC collection to process.
    coll_grp = parser.add_mutually_exclusive_group()
    coll_grp.add_argument('-b', '--breast', help='the breast TCIA collection',
                          dest='collection', action='store_const', const='Breast')
    coll_grp.add_argument(
        '-s', '--sarcoma', help='the sarcoma TCIA collection',
        dest='collection', action='store_const', const='Sarcoma')

    # The XNAT project id.
    parser.add_argument(
        '-p', '--project', help='the XNAT project (default is QIN)',
        default='QIN')

    # The logging level.
    verbosity_grp = parser.add_mutually_exclusive_group()
    verbosity_grp.add_argument('-q', '--quiet', help="don't print messages",
                               dest='log_level', action='store_const', const='ERROR')
    verbosity_grp.add_argument(
        '-v', '--verbose', help='print informational messages',
        dest='log_level', action='store_const', const='INFO')
    verbosity_grp.add_argument('-d', '--debug', help='print debug messages',
                               dest='log_level', action='store_const',
                               const='DEBUG')

    # The log, output and work options.
    parser.add_argument('-l', '--log', help='the log file', metavar='FILE')
    parser.add_argument(
        '-o', '--output', help='the destination directory (default current directory)',
        metavar='DIR')
    parser.add_argument(
        '-w', '--work', help='the work directory (default a new temp directory)',
        metavar='DIR')

    # The option to resubmit the workflow to pick up where it left off.
    parser.add_argument(
        '-r', '--resubmit', help='resubmit a workflow to pick up where it left off',
        action='store_true')

    # The dangerous overwrite option.
    parser.add_argument('--overwrite', help='replace existing XNAT subjects',
                        action='store_true')

    # The XNAT objects, or False to disable.
    parser.add_argument('--no-staging', help='disable the staging workflow',
                        dest='staging', action='store_false')
    parser.add_argument('--mask', help="the mask XNAT reconstruction name",
                        metavar='RECON', dest='mask')
    reg_grp = parser.add_mutually_exclusive_group()
    reg_grp.add_argument(
        '--registration', help='the XNAT registration reconstruction name',
        metavar='RECON', dest='registration')
    reg_grp.add_argument('--no-registration', help='skip registration',
                         dest='registration', action='store_false')
    parser.add_argument('--no-modeling', help='disable the modeling workflow',
                        dest='modeling', action='store_false')

    # The input subject directories or XNAT labels to process.
    parser.add_argument('inputs', help='the input AIRC DICOM subject directory'
                        ' or XNAT session label if staging is not performed',
                        metavar='INPUT', nargs='+')

    return parser.parse_args()


if __name__ == '__main__':
    sys.exit(main())
