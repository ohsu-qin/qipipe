#!/usr/bin/env python
"""
Deletes an OHSU QIN XNAT object.
"""

import sys
import argparse
from qipipe.helpers import logging_helper
from qipipe.helpers import xnat_helper


def main(argv=sys.argv):
    # Parse the command line arguments.
    label, opts = _parse_arguments()

    # Configure the logger.
    log_cfg = {}
    if 'log' in opts:
        log_cfg['filename'] = opts.pop('log')
    if 'log_level' in opts:
        log_cfg['level'] = opts.pop('log_level')
    logging_helper.configure(**log_cfg)

    # The XNAT hierarchy options.
    if 'reconstruction' in opts:
        xnat_opts = dict(reconstruction=opts['reconstruction'])
    elif 'assessor' in opts:
        xnat_opts = dict(assessor=opts['assessor'])
    else:
        xnat_opts = {}
    if 'format' in opts:
        xnat_opts['format'] = opts['format']
    if 'output' in opts:
        xnat_opts['dest'] = opts['output']

    # Parse the XNAT session label argument.
    prj, sbj, sess = xnat_helper.parse_session_label(label)
    # Delete the XNAT object.
    with xnat_helper.connection() as xnat:
        xnat_obj = xnat.find(prj, sbj, sess, **xnat_opts)
        if not xnat_obj.exists():
            raise ValueError("XNAT object %s %s %s %s does not exist" %
                             (prj, sbj, sess, xnat_opts))
        xnat_obj.delete()

    return 0


def _parse_arguments():
    """Parses the command line arguments."""
    parser = argparse.ArgumentParser()

    # The logging options.
    parser.add_argument('-l', '--log', help='the log file', metavar='FILE')
    verbosity_grp = parser.add_mutually_exclusive_group()
    verbosity_grp.add_argument('-q', '--quiet', help="don't print messages",
                               dest='log_level', action='store_const', const='ERROR')
    verbosity_grp.add_argument(
        '-v', '--verbose', help='print informational messages',
        dest='log_level', action='store_const', const='INFO')
    verbosity_grp.add_argument('-d', '--debug', help='print debug messages',
                               dest='log_level', action='store_const', const='DEBUG')

    # The XNAT name options.
    target_grp = parser.add_mutually_exclusive_group()
    target_grp.add_argument(
        '-r', '--reconstruction', help='the XNAT reconstruction name')
    target_grp.add_argument('-a', '--assessor', help='the XNAT assessor name')
    parser.add_argument(
        '-f', '--format', help='the file format (default NiFTI)')

    # The input sessions to process.
    parser.add_argument('session', metavar='LABEL', help='the target XNAT session')

    args = vars(parser.parse_args())
    nonempty_args = dict((k, v) for k, v in args.iteritems() if v != None)

    return nonempty_args.pop('session'), nonempty_args


if __name__ == '__main__':
    sys.exit(main())
