#!/usr/bin/env python
"""
Deletes an OHSU QIN XNAT object.
"""

import sys
import argparse

# Import the command helper by path, since the log options must be
# processed before importing any qipipe module.
cmd = imp.load_source('command', 
                      os.path.dirname(__file__) + '/../qipipe/helpers/command.py')


def main(argv=sys.argv):
    # Parse the command line arguments.
    label, opts = _parse_arguments()

    # Configure the logger.
    cmd.configure_log(opts)
    
    # Import the qipipe pipeline module after configuring the logger.
    from qipipe.helpers import xnat_helper

    # Parse the XNAT session label argument.
    prj, sbj, sess = xnat_helper.parse_session_label(label)
    # Delete the XNAT object.
    with xnat_helper.connection() as xnat:
        xnat_obj = xnat.find(prj, sbj, sess, **opts)
        if not xnat_obj.exists():
            raise ValueError("XNAT object %s %s %s %s does not exist" %
                             (prj, sbj, sess, opts))
        xnat_obj.delete()

    return 0


def _parse_arguments():
    """Parses the command line arguments."""
    parser = argparse.ArgumentParser()

    # The log options.
    cmd.add_log_options(parser)

    # The XNAT name options.
    target_grp = parser.add_mutually_exclusive_group()
    target_grp.add_argument('-r', '--resource', metavar='LABEL',
                            help='the XNAT resource name')
    target_grp.add_argument('-a', '--assessor', metavar='LABEL',
                            help='the XNAT assessor name')
    target_grp.add_argument('--reconstruction', metavar='LABEL',
                            help='the XNAT reconstruction name')

    # The input session to process.
    parser.add_argument('session', help='the target XNAT session',
                        metavar='LABEL')

    args = vars(parser.parse_args())
    nonempty_args = dict((k, v) for k, v in args.iteritems() if v != None)

    return nonempty_args.pop('session'), nonempty_args


if __name__ == '__main__':
    sys.exit(main())
