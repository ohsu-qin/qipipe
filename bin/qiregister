#!/usr/bin/env python
"""
OHSU QIN U01 data ANTS symmetric normalization motion correction registration.
"""

import sys
import os
import getopt
from qipipe.registration import ants

import logging
logger = logging.getLogger('qipipe')

help_message = """
qiregister options DIRECTORY
Options:
    -h --help\tPrint this help message
    -m --metric\tThe similarity metric name - CC (default), MI or PR
    -o --output\tThe output location (default is the input directory)
    -w --work\tThe optional working directory location
    -R --reference\tThe fixed reference image (default is generated)
    -v --verbose\tPrint status messages
"""


class Usage(Exception):

    def __init__(self, msg):
        self.msg = msg


def main(argv=None):
    if argv is None:
        argv = sys.argv
    try:
        try:
            opts, args = getopt.getopt(argv[1:], 'h:m:o:w:R:v', ['help', 'metric', 'output', 'reference', 'work', 'verbose'])
        except getopt.error, msg:
            raise Usage(msg)

        # option processing
        metric = output = reference = work = None
        for option, value in opts:
            if option in ('-h', '--help'):
                print help_message
                return 0
            elif option in ('-m' '--metric'):
                metric = getattr(ants.similarity_metrics, value)()
            elif option in ('-o' '--output'):
                output = value
            elif option in ('-w' '--work'):
                work = value
            elif option in ('-R' '--reference'):
                reference = value
            elif option in ('-v' '--verbose'):
                logger.setLevel('DEBUG')
        if not args:
            raise Usage('Missing the images to register')
        if not len(args) == 1:
            raise Usage('Too many arguments')

        src = args[0]
        ants.register(src, output=output, work=work, reference=reference, metric=metric)

    except Usage, err:
        print >> sys.stderr, sys.argv[0].split('/')[-1] + ': ' + str(err.msg)
        return 2

    return 0

if __name__ == '__main__':
    sys.exit(main())
