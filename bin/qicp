#!/usr/bin/env python
"""
Downloads or uploads XNAT files.
"""

import sys
import os
import re
import imp
import argparse
from collections import defaultdict

# Import the command helper by path, since the log options must be
# processed before importing any qipipe module.
cmd = imp.load_source('command',
                      (os.path.dirname(__file__) +
                       '/../qipipe/helpers/command.py'))


class ArgumentError(Exception):
    pass


class SessionNotFoundError(Exception):
    pass


def main(argv=sys.argv):
    # Parse the command line arguments.
    src, dest, opts = _parse_arguments()

    # The XNAT configuration.
    config = opts.pop('config', None)

    # Configure the logger.
    cmd.configure_log(opts)

    # Import the pyxnat and qipipe pipeline module after configuring
    # the logger.
    from pyxnat.core.resources import Reconstruction
    import qipipe
    from qipipe.helpers import xnat_helper

    # Determine whether the copy is an upload or download.
    xnat_prefix = 'xnat:'
    if src.startswith(xnat_prefix):
        xnat_path = src[len(xnat_prefix):]
        if not xnat_path.endswith('/files'):
            raise ArgumentError("The xnat source argument must end in 'files':"
                                " %s" % src)
        direction = 'down'
    elif dest.startswith(xnat_prefix):
        xnat_path = dest[len(xnat_prefix):]
        direction = 'up'
    else:
        raise ArgumentError("Neither the source nor the destination begin with 'xnat:'")

    # Parse the XNAT hierarchy argument.
    path_items = xnat_path.split('/')
    if len(path_items) < 2:
        raise ValueError('The search path must include at least two items,'
                         ' e.g. Breast003/Session01')
    prj = opts.pop('project', qipipe.project())
    sbj, sess = path_items[0:2]
    child_path = xnat_helper.standardize_experiment_child_hierarchy(path_items[2:])
    with xnat_helper.connection(config) as xnat:
        sess_obj = xnat.get_session(prj, sbj, sess)
        if not sess_obj.exists():
            raise SessionNotFoundError("No such XNAT session: %s %s %s" %
                                       (prj, sbj, sess))
        xnat_objs = xnat_helper.expand_child_hierarchy(sess_obj, child_path)
        if direction is 'up':
            # TODO - implement
            raise ArgumentError("Upload is not yet implemented")
        else:
            if not os.path.exists(dest):
                os.makedirs(dest)
            for file_obj in xnat_objs:
                xnat.download_file(file_obj, dest)

    return 0


def _parse_arguments():
    """Parses the command line arguments."""
    parser = argparse.ArgumentParser()

    # The log options.
    cmd.add_standard_options(parser)

    # The source directory or XNAT hierarchy path.
    parser.add_argument('source', help='the source directory or XNAT object path')

    # The destination directory or XNAT hierarchy path.
    parser.add_argument('dest', help='the destination directory or XNAT object path')

    args = vars(parser.parse_args())
    nonempty_args = dict((k, v) for k, v in args.iteritems() if v != None)

    return nonempty_args.pop('source'), nonempty_args.pop('dest'), nonempty_args


if __name__ == '__main__':
    sys.exit(main())
